# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 5000
run_number: 101

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: BernZMQData

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   board_id: 1

   RunNumber: 101
   SubrunTimeWindowSize: 1e8
   SequenceTimeWindowSize: 1e8

   nADCBits: 12
   nChannels: 32
   ReaderID: 0x1
   
   FEBIDs : [ 0x603712341e, 0x603712341a, 0x603712341b, 0x603712341c, 0x603712341d, 0x603712341f,
              0x6037123434, 0x603712343d, 0x603712343c, 0x603712343a, 0x603712343b, 0x6037123439, 0x6037123438]
  
   MaxTimeDiffs : [ 1e8 ]

   FEBDequeBufferCapacity: 10e3
   FEBDTPBufferCapacity: 1024

   zmq_data_pub_port: "tcp://localhost:5556"
   zmq_data_receive_timeout_ms: 500
   

   #eth_interface : eth0
   #BiasON: true
   #SCRCONF: "/home/wketchum/uboonedaq-bernfebdaq/bernfebdrv/CONF/CITIROC_SC_PROFILE1.txt"
   #PMRCONF: "/home/wketchum/uboonedaq-bernfebdaq/bernfebdrv/CONF/CITIROC_PROBEbitstream.txt"

   MaxDTPSleep: 1e8

   #throttle_usecs: 2e6
   #throttle_usecs_check: 1e6

   metrics: {
#     graphite:{
#       level: 5
#       metricPluginType: "graphite"
#       host: "localhost"
#       #port: "8080"
#       namespace: "artdaq.FragmentGenerator."
#     }
     verbosefile: {
       level: 5
       metricPluginType: "file"
       fileMode: "Overwrite"
       fileName: "/tmp/FileMetric_%UID%.verbose.out"
       uniquify: true
     }
   }

}  		  

event_builder: {

  expected_fragments_per_event: 13
  use_art: true
  print_event_store_stats: true
  verbose: true
  events_expected_in_SimpleQueueReader: @local::events_to_generate
}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
    dump:
    {
      module_type: BernFEBDump
      raw_data_label: "daq"
      verbosity: 1
    }
  }

  producers:
  {
  }

  a1: [ dump ]
  p1: [ ]
  e1: [ out1, rootout ]
  #end_paths: [ e1, a1 ]
  end_paths: [ e1 ]
}

outputs:
{

 rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0
  }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
module_type: RawInput
waiting_time: 900
resume_after_timeout: true
fragment_type_map: [ [2, "BernFEB" ], [3, "BernZMQ"] ]
}

process_name: Driver



