# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 50000
run_number: 101

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: BernFEBFakeData 

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   board_id: 1

   RunNumber: 101
   SubrunTimeWindowSize: 1e7
   SequenceTimeWindowSize: 1e7

   nADCBits: 12
   nChannels: 32
   ReaderID: 0x1
   #FEBIDs : [ 0x1234567, 0x2345678, 0x3456789, 0x456789a, 0x56789ab ]
   FEBIDs : [0x1234567]

   FEBDequeBufferCapacity: 5e3
   FEBDTPBufferCapacity: 1024

   throttle_usecs: 2e6
   throttle_usecs_check: 1e6

   random_seed: 314159
   data_wait_time: 5e5
   time_increment_per_event: 897897
   events_per_packet: 10

   metrics: {
     graphite:{
       level: 5
       metricPluginType: "graphite"
       host: "localhost"
       port: "8080"
       namespace: "artdaq.FragmentGenerator."
     }
     verbosefile: {
       level: 5
       metricPluginType: "file"
       fileMode: "Overwrite"
       fileName: "/tmp/FileMetric_%UID%.verbose.out"
       uniquify: true
     }
   }

}  		  

event_builder: {

  expected_fragments_per_event: 1
  use_art: true
  print_event_store_stats: true
  verbose: true
  events_expected_in_SimpleQueueReader: @local::events_to_generate

   metrics: {
     graphite:{
       level: 5
       metricPluginType: "graphite"
       host: "localhost"
       port: "8080"
       namespace: "artdaq.evb."
     }
     verbosefile: {
       level: 5
       metricPluginType: "file"
       fileMode: "Overwrite"
       fileName: "/tmp/FileMetricEVB_%UID%.verbose.out"
       uniquify: true
     }
   }

}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
    dump:
    {
      module_type: BernFEBDump
      raw_data_label: "daq"
    }
  }

  producers:
  {
  }

  a1: [ dump ]
  p1: [ ]
  e1: [ out1, rootout ]
  #end_paths: [ e1, a1 ]
  end_paths: [ a1 ]
}

outputs:
{

 rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0
  }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
module_type: RawInput
waiting_time: 900
resume_after_timeout: true
fragment_type_map: [ [2, "BernFEB" ] ]
}

process_name: Driver



